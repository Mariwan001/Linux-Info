#!/bin/bash

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
BOLD='\033[1m'
DIM='\033[2m'
NC='\033[0m'

# Function to clear screen
clear_screen() {
    clear
}

# Typewriter effect
typewriter() {
    text="$1"
    delay="${2:-0.03}"
    for ((i=0; i<${#text}; i++)); do
        echo -n "${text:$i:1}"
        sleep "$delay"
    done
    echo
}

# Center text function
center_text() {
    local text="$1"
    local width=$(tput cols)
    local padding=$(( (width - ${#text}) / 2 ))
    printf "%${padding}s%s\n" "" "$text"
}

# Animated header
show_header() {
    clear_screen
    echo
    echo
    echo -e "${CYAN}${BOLD}"
    center_text "██╗     ██╗███╗   ██╗██╗   ██╗██╗  ██╗"
    center_text "██║     ██║████╗  ██║██║   ██║╚██╗██╔╝"
    center_text "██║     ██║██╔██╗ ██║██║   ██║ ╚███╔╝ "
    center_text "██║     ██║██║╚██╗██║██║   ██║ ██╔██╗ "
    center_text "███████╗██║██║ ╚████║╚██████╔╝██╔╝ ██╗"
    center_text "╚══════╝╚═╝╚═╝  ╚═══╝ ╚═════╝ ╚═╝  ╚═╝"
    echo -e "${NC}"
    echo
    echo -e "${MAGENTA}${BOLD}"
    center_text "════════════════════════════════════════"
    echo -e "${NC}"
    echo
    echo -e "${WHITE}${BOLD}"
    center_text "CREATED BY MARIWAN"
    echo -e "${NC}"
    echo
    sleep 1.5
}

# Main menu with typewriter effect
show_menu() {
    clear_screen
    show_header
    
    echo -e "${GREEN}${BOLD}"
    typewriter "╔════════════════════════════════════════════════════╗" 0.01
    typewriter "║          SELECT A LINUX DISTRIBUTION               ║" 0.01
    typewriter "╚════════════════════════════════════════════════════╝" 0.01
    echo -e "${NC}"
    echo
    
    echo -e "${CYAN}${BOLD}  1)${NC} ${WHITE}Kali Linux${NC}        ${DIM}- Penetration Testing Powerhouse${NC}"
    echo -e "${CYAN}${BOLD}  2)${NC} ${WHITE}Arch Linux${NC}        ${DIM}- Ultimate Customization Freedom${NC}"
    echo -e "${CYAN}${BOLD}  3)${NC} ${WHITE}Parrot OS${NC}         ${DIM}- Security & Privacy Focused${NC}"
    echo -e "${CYAN}${BOLD}  4)${NC} ${WHITE}Ubuntu${NC}            ${DIM}- User-Friendly Powerhouse${NC}"
    echo -e "${CYAN}${BOLD}  5)${NC} ${WHITE}Fedora${NC}            ${DIM}- Cutting-Edge Innovation${NC}"
    echo -e "${CYAN}${BOLD}  6)${NC} ${WHITE}Debian${NC}            ${DIM}- Rock-Solid Stability${NC}"
    echo -e "${CYAN}${BOLD}  7)${NC} ${WHITE}Manjaro${NC}           ${DIM}- Arch Made Easy${NC}"
    echo -e "${CYAN}${BOLD}  8)${NC} ${WHITE}Gentoo${NC}            ${DIM}- Compile Everything${NC}"
    echo -e "${CYAN}${BOLD}  9)${NC} ${WHITE}BlackArch${NC}         ${DIM}- 2800+ Security Tools${NC}"
    echo -e "${CYAN}${BOLD} 10)${NC} ${WHITE}Tails${NC}             ${DIM}- Anonymous & Secure${NC}"
    echo -e "${CYAN}${BOLD} 11)${NC} ${WHITE}Alpine Linux${NC}      ${DIM}- Ultra Lightweight${NC}"
    echo -e "${CYAN}${BOLD} 12)${NC} ${WHITE}NixOS${NC}             ${DIM}- Reproducible System${NC}"
    echo
    echo -e "${RED}${BOLD}  0)${NC} ${WHITE}Exit${NC}"
    echo
    echo -e "${YELLOW}${BOLD}════════════════════════════════════════════════════${NC}"
    echo -n -e "${GREEN}${BOLD}Enter your choice: ${NC}"
}

# Distribution information functions
show_kali() {
    clear_screen
    echo -e "${RED}${BOLD}"
    echo "╔═══════════════════════════════════════════════════════════════╗"
    echo "║                      KALI LINUX                               ║"
    echo "╚═══════════════════════════════════════════════════════════════╝"
    echo -e "${NC}"
    
    echo -e "${CYAN}${BOLD}🔥 UNIQUE FEATURES:${NC}"
    echo -e "${WHITE}• Pre-installed with 600+ penetration testing tools${NC}"
    echo -e "${WHITE}• Custom kernel with wireless injection patches${NC}"
    echo -e "${WHITE}• Forensics mode - boots without mounting drives${NC}"
    echo -e "${WHITE}• Kali NetHunter for Android penetration testing${NC}"
    echo -e "${WHITE}• ARM support for Raspberry Pi, Odroid, BeagleBone${NC}"
    echo
    
    echo -e "${YELLOW}${BOLD}🎯 KILLER TOOLS:${NC}"
    echo -e "${GREEN}• Metasploit Framework: exploit development platform${NC}"
    echo -e "${GREEN}• Burp Suite: web application security testing${NC}"
    echo -e "${GREEN}• Aircrack-ng: wireless network auditing suite${NC}"
    echo -e "${GREEN}• John the Ripper: password cracking tool${NC}"
    echo -e "${GREEN}• Wireshark: network protocol analyzer${NC}"
    echo -e "${GREEN}• Nmap: network discovery and security auditing${NC}"
    echo
    
    echo -e "${MAGENTA}${BOLD}💎 ADVANCED COMMANDS:${NC}"
    echo -e "${CYAN}# Start PostgreSQL for Metasploit${NC}"
    echo -e "${WHITE}sudo systemctl start postgresql && sudo msfdb init${NC}"
    echo
    echo -e "${CYAN}# WiFi monitor mode (interface wlan0)${NC}"
    echo -e "${WHITE}sudo airmon-ng start wlan0${NC}"
    echo
    echo -e "${CYAN}# Scan for nearby networks${NC}"
    echo -e "${WHITE}sudo airodump-ng wlan0mon${NC}"
    echo
    echo -e "${CYAN}# Create custom wordlist${NC}"
    echo -e "${WHITE}crunch 8 12 -t @@@@%%%% -o wordlist.txt${NC}"
    echo
    echo -e "${CYAN}# Anonymous web browsing setup${NC}"
    echo -e "${WHITE}proxychains firefox${NC}"
    echo
    echo -e "${CYAN}# Scan network for live hosts${NC}"
    echo -e "${WHITE}nmap -sn 192.168.1.0/24${NC}"
    echo
    
    echo -e "${BLUE}${BOLD}📦 PACKAGE MANAGEMENT:${NC}"
    echo -e "${WHITE}sudo apt update && sudo apt upgrade -y${NC}"
    echo -e "${WHITE}apt-cache search [tool-name]  # Search for tools${NC}"
    echo
    
    echo -e "${RED}${BOLD}⚡ QUICK HACKS:${NC}"
    echo -e "${YELLOW}• Rolling release - always bleeding edge${NC}"
    echo -e "${YELLOW}• Can run from USB without installation${NC}"
    echo -e "${YELLOW}• Customizable with kali-tweaks utility${NC}"
    echo
}

show_arch() {
    clear_screen
    echo -e "${BLUE}${BOLD}"
    echo "╔═══════════════════════════════════════════════════════════════╗"
    echo "║                      ARCH LINUX                               ║"
    echo "╚═══════════════════════════════════════════════════════════════╝"
    echo -e "${NC}"
    
    echo -e "${CYAN}${BOLD}🔥 UNIQUE FEATURES:${NC}"
    echo -e "${WHITE}• Rolling release - always latest software${NC}"
    echo -e "${WHITE}• AUR (Arch User Repository) - 80,000+ community packages${NC}"
    echo -e "${WHITE}• Minimalist base - you build your system${NC}"
    echo -e "${WHITE}• ArchWiki - the best Linux documentation ever${NC}"
    echo -e "${WHITE}• KISS principle - Keep It Simple, Stupid${NC}"
    echo
    
    echo -e "${YELLOW}${BOLD}🎯 POWER TOOLS:${NC}"
    echo -e "${GREEN}• pacman: lightning-fast package manager${NC}"
    echo -e "${GREEN}• yay/paru: AUR helpers for easy access${NC}"
    echo -e "${GREEN}• makepkg: build packages from source${NC}"
    echo -e "${GREEN}• systemd: system and service manager${NC}"
    echo
    
    echo -e "${MAGENTA}${BOLD}💎 ADVANCED COMMANDS:${NC}"
    echo -e "${CYAN}# Update entire system${NC}"
    echo -e "${WHITE}sudo pacman -Syu${NC}"
    echo
    echo -e "${CYAN}# Install AUR helper (yay)${NC}"
    echo -e "${WHITE}git clone https://aur.archlinux.org/yay.git && cd yay && makepkg -si${NC}"
    echo
    echo -e "${CYAN}# Search packages in AUR${NC}"
    echo -e "${WHITE}yay -Ss [package-name]${NC}"
    echo
    echo -e "${CYAN}# Remove orphaned packages${NC}"
    echo -e "${WHITE}sudo pacman -Rns \$(pacman -Qtdq)${NC}"
    echo
    echo -e "${CYAN}# List explicitly installed packages${NC}"
    echo -e "${WHITE}pacman -Qe${NC}"
    echo
    echo -e "${CYAN}# Clear package cache${NC}"
    echo -e "${WHITE}sudo pacman -Sc${NC}"
    echo
    
    echo -e "${BLUE}${BOLD}📦 PACKAGE TIPS:${NC}"
    echo -e "${WHITE}pacman -Ql [package]  # List all files in package${NC}"
    echo -e "${WHITE}pacman -Qo /path/file # Find which package owns file${NC}"
    echo -e "${WHITE}pactree [package]     # Show dependency tree${NC}"
    echo
    
    echo -e "${RED}${BOLD}⚡ ARCH PHILOSOPHY:${NC}"
    echo -e "${YELLOW}• Manual installation teaches Linux internals${NC}"
    echo -e "${YELLOW}• No bloat - install only what you need${NC}"
    echo -e "${YELLOW}• 'btw I use Arch' - ultimate bragging rights${NC}"
    echo
}

show_parrot() {
    clear_screen
    echo -e "${CYAN}${BOLD}"
    echo "╔═══════════════════════════════════════════════════════════════╗"
    echo "║                      PARROT OS                                ║"
    echo "╚═══════════════════════════════════════════════════════════════╝"
    echo -e "${NC}"
    
    echo -e "${CYAN}${BOLD}🔥 UNIQUE FEATURES:${NC}"
    echo -e "${WHITE}• Lightweight - runs on 256MB RAM${NC}"
    echo -e "${WHITE}• AnonSurf - system-wide Tor anonymization${NC}"
    echo -e "${WHITE}• Hardened kernel for enhanced security${NC}"
    echo -e "${WHITE}• Cloud-friendly with Docker/K8s support${NC}"
    echo -e "${WHITE}• Debian-based but privacy-first${NC}"
    echo
    
    echo -e "${YELLOW}${BOLD}🎯 PRIVACY ARSENAL:${NC}"
    echo -e "${GREEN}• AnonSurf: route all traffic through Tor${NC}"
    echo -e "${GREEN}• Wifiphisher: WiFi security testing${NC}"
    echo -e "${GREEN}• Bettercap: network attack framework${NC}"
    echo -e "${GREEN}• Anonsurf-gtk: GUI for anonymity${NC}"
    echo
    
    echo -e "${MAGENTA}${BOLD}💎 ADVANCED COMMANDS:${NC}"
    echo -e "${CYAN}# Start AnonSurf (system-wide Tor)${NC}"
    echo -e "${WHITE}sudo anonsurf start${NC}"
    echo
    echo -e "${CYAN}# Check AnonSurf status${NC}"
    echo -e "${WHITE}sudo anonsurf status${NC}"
    echo
    echo -e "${CYAN}# Change Tor identity${NC}"
    echo -e "${WHITE}sudo anonsurf changeid${NC}"
    echo
    echo -e "${CYAN}# Start Wifiphisher${NC}"
    echo -e "${WHITE}sudo wifiphisher -aI wlan0${NC}"
    echo
    echo -e "${CYAN}# Docker pentesting environment${NC}"
    echo -e "${WHITE}docker run -it parrotsec/security${NC}"
    echo
    echo -e "${CYAN}# Update system & tools${NC}"
    echo -e "${WHITE}sudo parrot-upgrade${NC}"
    echo
    
    echo -e "${BLUE}${BOLD}📦 SPECIAL EDITIONS:${NC}"
    echo -e "${WHITE}• Security Edition: Full pentesting suite${NC}"
    echo -e "${WHITE}• Home Edition: Privacy for daily use${NC}"
    echo -e "${WHITE}• Cloud Edition: For servers & containers${NC}"
    echo
    
    echo -e "${RED}${BOLD}⚡ WHY PARROT?${NC}"
    echo -e "${YELLOW}• More lightweight than Kali${NC}"
    echo -e "${YELLOW}• Better privacy tools out-of-box${NC}"
    echo -e "${YELLOW}• Beautiful MATE desktop environment${NC}"
    echo
}

show_ubuntu() {
    clear_screen
    echo -e "${MAGENTA}${BOLD}"
    echo "╔═══════════════════════════════════════════════════════════════╗"
    echo "║                      UBUNTU                                   ║"
    echo "╚═══════════════════════════════════════════════════════════════╝"
    echo -e "${NC}"
    
    echo -e "${CYAN}${BOLD}🔥 UNIQUE FEATURES:${NC}"
    echo -e "${WHITE}• Snap packages - universal Linux packages${NC}"
    echo -e "${WHITE}• LTS releases with 5 years support${NC}"
    echo -e "${WHITE}• Largest community & best hardware support${NC}"
    echo -e "${WHITE}• Ubuntu Pro - free for personal use${NC}"
    echo -e "${WHITE}• Official WSL support for Windows${NC}"
    echo
    
    echo -e "${YELLOW}${BOLD}🎯 POWER FEATURES:${NC}"
    echo -e "${GREEN}• Snap Store: containerized applications${NC}"
    echo -e "${GREEN}• PPAs: Personal Package Archives${NC}"
    echo -e "${GREEN}• Ubuntu Advantage: enterprise support${NC}"
    echo -e "${GREEN}• Live Patch: kernel updates without reboot${NC}"
    echo
    
    echo -e "${MAGENTA}${BOLD}💎 ADVANCED COMMANDS:${NC}"
    echo -e "${CYAN}# Install from Snap Store${NC}"
    echo -e "${WHITE}sudo snap install [package-name]${NC}"
    echo
    echo -e "${CYAN}# Add PPA repository${NC}"
    echo -e "${WHITE}sudo add-apt-repository ppa:repository-name${NC}"
    echo
    echo -e "${CYAN}# Enable Ubuntu Pro (free for personal)${NC}"
    echo -e "${WHITE}sudo pro attach${NC}"
    echo
    echo -e "${CYAN}# Check for kernel livepatch${NC}"
    echo -e "${WHITE}sudo canonical-livepatch status${NC}"
    echo
    echo -e "${CYAN}# Clean up old kernels${NC}"
    echo -e "${WHITE}sudo apt autoremove --purge${NC}"
    echo
    echo -e "${CYAN}# List all installed snaps${NC}"
    echo -e "${WHITE}snap list${NC}"
    echo
    
    echo -e "${BLUE}${BOLD}📦 FLAVORS:${NC}"
    echo -e "${WHITE}• Ubuntu Desktop: GNOME interface${NC}"
    echo -e "${WHITE}• Kubuntu: KDE Plasma desktop${NC}"
    echo -e "${WHITE}• Xubuntu: Lightweight XFCE${NC}"
    echo -e "${WHITE}• Ubuntu Server: Headless powerhouse${NC}"
    echo
    
    echo -e "${RED}${BOLD}⚡ PRO TIPS:${NC}"
    echo -e "${YELLOW}• Best for beginners & production${NC}"
    echo -e "${YELLOW}• Massive software repository${NC}"
    echo -e "${YELLOW}• Excellent for gaming with Steam${NC}"
    echo
}

show_fedora() {
    clear_screen
    echo -e "${BLUE}${BOLD}"
    echo "╔═══════════════════════════════════════════════════════════════╗"
    echo "║                      FEDORA                                   ║"
    echo "╚═══════════════════════════════════════════════════════════════╝"
    echo -e "${NC}"
    
    echo -e "${CYAN}${BOLD}🔥 UNIQUE FEATURES:${NC}"
    echo -e "${WHITE}• Bleeding-edge tech - latest kernel & software${NC}"
    echo -e "${WHITE}• SELinux enabled by default (security)${NC}"
    echo -e "${WHITE}• Upstream for Red Hat Enterprise Linux${NC}"
    echo -e "${WHITE}• Btrfs filesystem with snapshots${NC}"
    echo -e "${WHITE}• Wayland display server by default${NC}"
    echo
    
    echo -e "${YELLOW}${BOLD}🎯 DEVELOPER TOOLS:${NC}"
    echo -e "${GREEN}• DNF: powerful package manager${NC}"
    echo -e "${GREEN}• Toolbox: containerized development${NC}"
    echo -e "${GREEN}• Flatpak: sandboxed applications${NC}"
    echo -e "${GREEN}• COPR: community repositories${NC}"
    echo
    
    echo -e "${MAGENTA}${BOLD}💎 ADVANCED COMMANDS:${NC}"
    echo -e "${CYAN}# Update system${NC}"
    echo -e "${WHITE}sudo dnf upgrade --refresh${NC}"
    echo
    echo -e "${CYAN}# Search for package${NC}"
    echo -e "${WHITE}dnf search [package-name]${NC}"
    echo
    echo -e "${CYAN}# Create development container${NC}"
    echo -e "${WHITE}toolbox create dev-env && toolbox enter dev-env${NC}"
    echo
    echo -e "${CYAN}# Install from Flathub${NC}"
    echo -e "${WHITE}flatpak install flathub [app-name]${NC}"
    echo
    echo -e "${CYAN}# Enable COPR repository${NC}"
    echo -e "${WHITE}sudo dnf copr enable [repo-name]${NC}"
    echo
    echo -e "${CYAN}# Check SELinux status${NC}"
    echo -e "${WHITE}sestatus${NC}"
    echo
    
    echo -e "${BLUE}${BOLD}📦 SPINS:${NC}"
    echo -e "${WHITE}• Fedora Workstation: GNOME desktop${NC}"
    echo -e "${WHITE}• Fedora KDE: Plasma desktop${NC}"
    echo -e "${WHITE}• Fedora Silverblue: Immutable OS${NC}"
    echo -e "${WHITE}• Fedora CoreOS: Container-focused${NC}"
    echo
    
    echo -e "${RED}${BOLD}⚡ WHY FEDORA?${NC}"
    echo -e "${YELLOW}• Linus Torvalds uses it!${NC}"
    echo -e "${YELLOW}• Perfect for developers${NC}"
    echo -e "${YELLOW}• Latest tech without instability${NC}"
    echo
}

show_debian() {
    clear_screen
    echo -e "${RED}${BOLD}"
    echo "╔═══════════════════════════════════════════════════════════════╗"
    echo "║                      DEBIAN                                   ║"
    echo "╚═══════════════════════════════════════════════════════════════╝"
    echo -e "${NC}"
    
    echo -e "${CYAN}${BOLD}🔥 UNIQUE FEATURES:${NC}"
    echo -e "${WHITE}• Most stable Linux distribution${NC}"
    echo -e "${WHITE}• Universal OS - runs on everything${NC}"
    echo -e "${WHITE}• 51,000+ packages in repository${NC}"
    echo -e "${WHITE}• Entirely community-driven${NC}"
    echo -e "${WHITE}• Basis for 140+ distributions${NC}"
    echo
    
    echo -e "${YELLOW}${BOLD}🎯 RELEASE BRANCHES:${NC}"
    echo -e "${GREEN}• Stable: Rock-solid, production-ready${NC}"
    echo -e "${GREEN}• Testing: Newer packages, still reliable${NC}"
    echo -e "${GREEN}• Unstable (Sid): Rolling, cutting-edge${NC}"
    echo
    
    echo -e "${MAGENTA}${BOLD}💎 ADVANCED COMMANDS:${NC}"
    echo -e "${CYAN}# Update package lists${NC}"
    echo -e "${WHITE}sudo apt update${NC}"
    echo
    echo -e "${CYAN}# Upgrade all packages${NC}"
    echo -e "${WHITE}sudo apt full-upgrade${NC}"
    echo
    echo -e "${CYAN}# Search package descriptions${NC}"
    echo -e "${WHITE}apt search [keyword]${NC}"
    echo
    echo -e "${CYAN}# Show package details${NC}"
    echo -e "${WHITE}apt show [package-name]${NC}"
    echo
    echo -e "${CYAN}# List upgradable packages${NC}"
    echo -e "${WHITE}apt list --upgradable${NC}"
    echo
    echo -e "${CYAN}# Install without recommended packages${NC}"
    echo -e "${WHITE}sudo apt install --no-install-recommends [package]${NC}"
    echo
    
    echo -e "${BLUE}${BOLD}📦 ARCHITECTURE SUPPORT:${NC}"
    echo -e "${WHITE}• 10 official architectures supported${NC}"
    echo -e "${WHITE}• Runs on: ARM, PowerPC, MIPS, x86${NC}"
    echo -e "${WHITE}• Perfect for servers and embedded${NC}"
    echo
    
    echo -e "${RED}${BOLD}⚡ DEBIAN PHILOSOPHY:${NC}"
    echo -e "${YELLOW}• 'The Universal Operating System'${NC}"
    echo -e "${YELLOW}• Free software commitment${NC}"
    echo -e "${YELLOW}• Oldest still-active Linux distro${NC}"
    echo
}

show_manjaro() {
    clear_screen
    echo -e "${GREEN}${BOLD}"
    echo "╔═══════════════════════════════════════════════════════════════╗"
    echo "║                      MANJARO                                  ║"
    echo "╚═══════════════════════════════════════════════════════════════╝"
    echo -e "${NC}"
    
    echo -e "${CYAN}${BOLD}🔥 UNIQUE FEATURES:${NC}"
    echo -e "${WHITE}• Arch Linux made accessible${NC}"
    echo -e "${WHITE}• Automatic graphics driver detection${NC}"
    echo -e "${WHITE}• Delayed rolling release (tested packages)${NC}"
    echo -e "${WHITE}• Multiple kernel options${NC}"
    echo -e "${WHITE}• Beautiful themes out-of-box${NC}"
    echo
    
    echo -e "${YELLOW}${BOLD}🎯 MANJARO TOOLS:${NC}"
    echo -e "${GREEN}• Manjaro Settings Manager: GUI configuration${NC}"
    echo -e "${GREEN}• Manjaro Hardware Detection: auto drivers${NC}"
    echo -e "${GREEN}• pamac: user-friendly package manager${NC}"
    echo -e "${GREEN}• Timeshift: system snapshots${NC}"
    echo
    
    echo -e "${MAGENTA}${BOLD}💎 ADVANCED COMMANDS:${NC}"
    echo -e "${CYAN}# Update system (Manjaro way)${NC}"
    echo -e "${WHITE}sudo pacman-mirrors --fasttrack && sudo pacman -Syyu${NC}"
    echo
    echo -e "${CYAN}# Install from AUR with pamac${NC}"
    echo -e "${WHITE}pamac build [package-name]${NC}"
    echo
    echo -e "${CYAN}# List available kernels${NC}"
    echo -e "${WHITE}mhwd-kernel -li${NC}"
    echo
    echo -e "${CYAN}# Install another kernel${NC}"
    echo -e "${WHITE}sudo mhwd-kernel -i linux515${NC}"
    echo
    echo -e "${CYAN}# Hardware detection${NC}"
    echo -e "${WHITE}sudo mhwd -a pci free 0300${NC}"
    echo
    echo -e "${CYAN}# Create system snapshot${NC}"
    echo -e "${WHITE}sudo timeshift --create --comments \"Before update\"${NC}"
    echo
    
    echo -e "${BLUE}${BOLD}📦 DESKTOP EDITIONS:${NC}"
    echo -e "${WHITE}• XFCE: Lightweight & stable${NC}"
    echo -e "${WHITE}• KDE Plasma: Feature-rich & beautiful${NC}"
    echo -e "${WHITE}• GNOME: Modern & clean${NC}"
    echo
    
    echo -e "${RED}${BOLD}⚡ BEST OF BOTH WORLDS:${NC}"
    echo -e "${YELLOW}• Arch's power without complexity${NC}"
    echo -e "${YELLOW}• Rolling release that's stable${NC}"
    echo -e "${YELLOW}• Perfect for gaming${NC}"
    echo
}

show_gentoo() {
    clear_screen
    echo -e "${MAGENTA}${BOLD}"
    echo "╔═══════════════════════════════════════════════════════════════╗"
    echo "║                      GENTOO                                   ║"
    echo "╚═══════════════════════════════════════════════════════════════╝"
    echo -e "${NC}"
    
    echo -e "${CYAN}${BOLD}🔥 UNIQUE FEATURES:${NC}"
    echo -e "${WHITE}• Compile everything from source${NC}"
    echo -e "${WHITE}• Ultimate optimization for your hardware${NC}"
    echo -e "${WHITE}• Portage - powerful package system${NC}"
    echo -e "${WHITE}• USE flags - customize everything${NC}"
    echo -e "${WHITE}• Meta-distribution flexibility${NC}"
    echo
    
    echo -e "${YELLOW}${BOLD}🎯 GENTOO POWER:${NC}"
    echo -e "${GREEN}• emerge: build packages with custom flags${NC}"
    echo -e "${GREEN}• USE flags: enable/disable features${NC}"
    echo -e "${GREEN}• CFLAGS: compiler optimization${NC}"
    echo -e "${GREEN}• Slots: multiple versions simultaneously${NC}"
    echo
    
    echo -e "${MAGENTA}${BOLD}💎 ADVANCED COMMANDS:${NC}"
    echo -e "${CYAN}# Sync Portage tree${NC}"
    echo -e "${WHITE}sudo emerge --sync${NC}"
    echo
    echo -e "${CYAN}# Update entire system${NC}"
    echo -e "${WHITE}sudo emerge --update --deep --newuse @world${NC}"
    echo
    echo -e "${CYAN}# Install package with custom USE flags${NC}"
    echo -e "${WHITE}USE=\"flag1 -flag2\" sudo emerge package-name${NC}"
    echo
    echo -e "${CYAN}# Search packages${NC}"
    echo -e "${WHITE}emerge --search [package-name]${NC}"
    echo
    echo -e "${CYAN}# Clean dependencies${NC}"
    echo -e "${WHITE}sudo emerge --depclean${NC}"
    echo
    echo -e "${CYAN}# Check what would be compiled${NC}"
    echo -e "${WHITE}emerge -pv [package-name]${NC}"
    echo
    
    echo -e "${BLUE}${BOLD}📦 OPTIMIZATION LEVELS:${NC}"
    echo -e "${WHITE}CFLAGS=\"-march=native -O2 -pipe\"  # CPU-specific${NC}"
    echo -e "${WHITE}MAKEOPTS=\"-j\$(nproc)\"             # Parallel builds${NC}"
    echo
    
    echo -e "${RED}${BOLD}⚡ FOR HARDCORE USERS:${NC}"
    echo -e "${YELLOW}• Installation takes 1-2 days${NC}"
    echo -e "${YELLOW}• Learn Linux internals deeply${NC}"
    echo -e "${YELLOW}• Fastest possible performance${NC}"
    echo -e "${YELLOW}• 'Compile your coffee maker' memes${NC}"
    echo
}

show_blackarch() {
    clear_screen
    echo -e "${RED}${BOLD}"
    echo "╔═══════════════════════════════════════════════════════════════╗"
    echo "║                    BLACK ARCH                                 ║"
    echo "╚═══════════════════════════════════════════════════════════════╝"
    echo -e "${NC}"
    
    echo -e "${CYAN}${BOLD}🔥 UNIQUE FEATURES:${NC}"
    echo -e "${WHITE}• 2800+ penetration testing tools${NC}"
    echo -e "${WHITE}• Can be installed over Arch Linux${NC}"
    echo -e "${WHITE}• Organized into 59 tool categories${NC}"
    echo -e "${WHITE}• Constantly updated repository${NC}"
    echo -e "${WHITE}• Multiple window managers available${NC}"
    echo
    
    echo -e "${YELLOW}${BOLD}🎯 TOOL CATEGORIES:${NC}"
    echo -e "${GREEN}• Exploitation, Forensics, Crypto${NC}"
    echo -e "${GREEN}• Wireless, Web Apps, Reversing${NC}"
    echo -e "${GREEN}• Social Engineering, Sniffing${NC}"
    echo -e "${GREEN}• Password Attacks, Scanner, Fuzzer${NC}"
    echo
    
    echo -e "${MAGENTA}${BOLD}💎 ADVANCED COMMANDS:${NC}"
    echo -e "${CYAN}# Install BlackArch repository${NC}"
    echo -e "${WHITE}curl -O https://blackarch.org/ба/blackarch-install.sh${NC}"
    echo -e "${WHITE}chmod +x blackarch-install.sh && sudo ./blackarch-install.sh${NC}"
    echo
    echo -e "${CYAN}# List all tools in a category${NC}"
    echo -e "${WHITE}pacman -Sg | grep blackarch${NC}"
    echo
    echo -e "${CYAN}# Install entire category${NC}"
    echo -e "${WHITE}sudo pacman -S blackarch-wireless${NC}"
    echo
    echo -e "${CYAN}# Search for specific tool${NC}"
    echo -e "${WHITE}pacman -Ss blackarch | grep [tool-name]${NC}"
    echo
    echo -e "${CYAN}# Install all BlackArch tools (WARNING: 30GB+)${NC}"
    echo -e "${WHITE}sudo pacman -S blackarch${NC}"
    echo
    
    echo -e "${BLUE}${BOLD}📦 UNIQUE TOOLS:${NC}"
    echo -e "${WHITE}• Sn1per: Automated pentest framework${NC}"
    echo -e "${WHITE}• Empire: PowerShell post-exploitation${NC}"
    echo -e "${WHITE}• Recon-ng: Web reconnaissance framework${NC}"
    echo
    
    echo -e "${RED}${BOLD}⚡ WHY BLACKARCH?${NC}"
    echo -e "${YELLOW}• More tools than Kali Linux${NC}"
    echo -e "${YELLOW}• Arch's flexibility + security tools${NC}"
    echo -e "${YELLOW}• Modular installation${NC}"
    echo
}

show_tails() {
    clear_screen
    echo -e "${BLUE}${BOLD}"
    echo "╔═══════════════════════════════════════════════════════════════╗"
    echo "║                        TAILS                                  ║"
    echo "╚═══════════════════════════════════════════════════════════════╝"
    echo -e "${NC}"
    
    echo -e "${CYAN}${BOLD}🔥 UNIQUE FEATURES:${NC}"
    echo -e "${WHITE}• Live OS - leaves no trace${NC}"
    echo -e "${WHITE}• All connections through Tor network${NC}"
    echo -e "${WHITE}• Amnesia - forgets everything on shutdown${NC}"
    echo -e "${WHITE}• Persistent storage (encrypted)${NC}"
    echo -e "${WHITE}• Used by Edward Snowden${NC}"
    echo
    
    echo -e "${YELLOW}${BOLD}🎯 PRIVACY TOOLS:${NC}"
    echo -e "${GREEN}• Tor Browser: Anonymous web browsing${NC}"
    echo -e "${GREEN}• Thunderbird: Email with OpenPGP${NC}"
    echo -e "${GREEN}• OnionShare: Share files anonymously${NC}"
    echo -e "${GREEN}• KeePassXC: Encrypted password manager${NC}"
    echo -e "${GREEN}• MAT2: Metadata removal tool${NC}"
    echo
    
    echo -e "${MAGENTA}${BOLD}💎 ADVANCED FEATURES:${NC}"
    echo -e "${CYAN}# Create persistent volume${NC}"
    echo -e "${WHITE}Applications → Tails → Configure persistent volume${NC}"
    echo
    echo -e "${CYAN}# Enable Additional Software${NC}"
    echo -e "${WHITE}Applications → System Tools → Additional Software${NC}"
    echo
    echo -e "${CYAN}# MAC address spoofing${NC}"
    echo -e "${WHITE}Enabled automatically on boot${NC}"
    echo
    echo -e "${CYAN}# Securely delete files${NC}"
    echo -e "${WHITE}Right-click → Wipe${NC}"
    echo
    echo -e "${CYAN}# Connect to hidden services${NC}"
    echo -e "${WHITE}Use .onion addresses in Tor Browser${NC}"
    echo
    
    echo -e "${BLUE}${BOLD}📦 SECURITY MEASURES:${NC}"
    echo -e "${WHITE}• Blocks non-Tor connections${NC}"
    echo -e "${WHITE}• No cookies or history saved${NC}"
    echo -e "${WHITE}• RAM-only operation${NC}"
    echo -e "${WHITE}• Encrypted persistent storage${NC}"
    echo
    
    echo -e "${RED}${BOLD}⚡ USE CASES:${NC}"
    echo -e "${YELLOW}• Journalism in hostile countries${NC}"
    echo -e "${YELLOW}• Whistleblowing safely${NC}"
    echo -e "${YELLOW}• Maximum privacy${NC}"
    echo -e "${YELLOW}• Avoid surveillance${NC}"
    echo
}

show_alpine() {
    clear_screen
    echo -e "${CYAN}${BOLD}"
    echo "╔═══════════════════════════════════════════════════════════════╗"
    echo "║                    ALPINE LINUX                               ║"
    echo "╚═══════════════════════════════════════════════════════════════╝"
    echo -e "${NC}"
    
    echo -e "${CYAN}${BOLD}🔥 UNIQUE FEATURES:${NC}"
    echo -e "${WHITE}• Incredibly small - 8MB base image${NC}"
    echo -e "${WHITE}• musl libc instead of glibc${NC}"
    echo -e "${WHITE}• BusyBox for core utilities${NC}"
    echo -e "${WHITE}• OpenRC init system${NC}"
    echo -e "${WHITE}• Most popular Docker base image${NC}"
    echo
    
    echo -e "${YELLOW}${BOLD}🎯 PERFECT FOR:${NC}"
    echo -e "${GREEN}• Docker containers${NC}"
    echo -e "${GREEN}• Embedded systems${NC}"
    echo -e "${GREEN}• Edge computing${NC}"
    echo -e "${GREEN}• Routers and firewalls${NC}"
    echo -e "${GREEN}• Kubernetes nodes${NC}"
    echo
    
    echo -e "${MAGENTA}${BOLD}💎 ADVANCED COMMANDS:${NC}"
    echo -e "${CYAN}# Package manager - apk${NC}"
    echo -e "${WHITE}apk update && apk upgrade${NC}"
    echo
    echo -e "${CYAN}# Search for packages${NC}"
    echo -e "${WHITE}apk search [package-name]${NC}"
    echo
    echo -e "${CYAN}# Install package${NC}"
    echo -e "${WHITE}apk add [package-name]${NC}"
    echo
    echo -e "${CYAN}# Remove package${NC}"
    echo -e "${WHITE}apk del [package-name]${NC}"
    echo
    echo -e "${CYAN}# List installed packages${NC}"
    echo -e "${WHITE}apk info${NC}"
    echo
    echo -e "${CYAN}# Setup Alpine (post-install)${NC}"
    echo -e "${WHITE}setup-alpine${NC}"
    echo
    
    echo -e "${BLUE}${BOLD}📦 DOCKER USAGE:${NC}"
    echo -e "${WHITE}FROM alpine:latest${NC}"
    echo -e "${WHITE}RUN apk add --no-cache python3${NC}"
    echo -e "${WHITE}# Smallest possible images!${NC}"
    echo
    
    echo -e "${RED}${BOLD}⚡ WHY ALPINE?${NC}"
    echo -e "${YELLOW}• Security-focused design${NC}"
    echo -e "${YELLOW}• Minimal attack surface${NC}"
    echo -e "${YELLOW}• Fast boot times${NC}"
    echo -e "${YELLOW}• Resource-efficient${NC}"
    echo
}

show_nixos() {
    clear_screen
    echo -e "${BLUE}${BOLD}"
    echo "╔═══════════════════════════════════════════════════════════════╗"
    echo "║                       NIX OS                                  ║"
    echo "╚═══════════════════════════════════════════════════════════════╝"
    echo -e "${NC}"
    
    echo -e "${CYAN}${BOLD}🔥 UNIQUE FEATURES:${NC}"
    echo -e "${WHITE}• Declarative system configuration${NC}"
    echo -e "${WHITE}• Reproducible builds${NC}"
    echo -e "${WHITE}• Atomic upgrades and rollbacks${NC}"
    echo -e "${WHITE}• 80,000+ packages${NC}"
    echo -e "${WHITE}• Revolutionary package manager${NC}"
    echo
    
    echo -e "${YELLOW}${BOLD}🎯 MIND-BLOWING CONCEPTS:${NC}"
    echo -e "${GREEN}• One config file defines entire system${NC}"
    echo -e "${GREEN}• Rollback to any previous state${NC}"
    echo -e "${GREEN}• Multiple versions of same package${NC}"
    echo -e "${GREEN}• Isolated development environments${NC}"
    echo
    
    echo -e "${MAGENTA}${BOLD}💎 ADVANCED COMMANDS:${NC}"
    echo -e "${CYAN}# Edit system configuration${NC}"
    echo -e "${WHITE}sudo nano /etc/nixos/configuration.nix${NC}"
    echo
    echo -e "${CYAN}# Rebuild system${NC}"
    echo -e "${WHITE}sudo nixos-rebuild switch${NC}"
    echo
    echo -e "${CYAN}# List all generations${NC}"
    echo -e "${WHITE}nix-env --list-generations${NC}"
    echo
    echo -e "${CYAN}# Rollback to previous generation${NC}"
    echo -e "${WHITE}sudo nixos-rebuild switch --rollback${NC}"
    echo
    echo -e "${CYAN}# Search for packages${NC}"
    echo -e "${WHITE}nix search nixpkgs [package-name]${NC}"
    echo
    echo -e "${CYAN}# Create development shell${NC}"
    echo -e "${WHITE}nix-shell -p python3 nodejs${NC}"
    echo
    
    echo -e "${BLUE}${BOLD}📦 CONFIGURATION EXAMPLE:${NC}"
    echo -e "${WHITE}{ config, pkgs, ... }:${NC}"
    echo -e "${WHITE}{${NC}"
    echo -e "${WHITE}  environment.systemPackages = with pkgs; [${NC}"
    echo -e "${WHITE}    vim git firefox${NC}"
    echo -e "${WHITE}  ];${NC}"
    echo -e "${WHITE}}${NC}"
    echo
    
    echo -e "${RED}${BOLD}⚡ REVOLUTIONARY:${NC}"
    echo -e "${YELLOW}• Never breaks your system${NC}"
    echo -e "${YELLOW}• Time-travel your OS${NC}"
    echo -e "${YELLOW}• DevOps dream come true${NC}"
    echo -e "${YELLOW}• Steep learning curve but worth it${NC}"
    echo
}

# Main loop
while true; do
    show_menu
    read -r choice
    
    case $choice in
        1) show_kali ;;
        2) show_arch ;;
        3) show_parrot ;;
        4) show_ubuntu ;;
        5) show_fedora ;;
        6) show_debian ;;
        7) show_manjaro ;;
        8) show_gentoo ;;
        9) show_blackarch ;;
        10) show_tails ;;
        11) show_alpine ;;
        12) show_nixos ;;
        0) 
            clear_screen
            echo -e "${GREEN}${BOLD}"
            typewriter "Thank you for using Linux-Info!" 0.05
            echo -e "${CYAN}"
            typewriter "Created by MARIWAN" 0.05
            echo -e "${NC}"
            exit 0
            ;;
        *)
            echo -e "${RED}Invalid choice. Please try again.${NC}"
            sleep 2
            continue
            ;;
    esac
    
    echo
    echo -e "${YELLOW}${BOLD}════════════════════════════════════════════════════${NC}"
    echo -n -e "${GREEN}Press ENTER to return to menu...${NC}"
    read -r
done
